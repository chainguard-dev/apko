// Copyright 2022, 2023 Chainguard, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package tarball

import (
	"archive/tar"
	"io"
	"io/fs"

	"github.com/klauspost/compress/gzip"
)

type MultiTar struct {
	out *gzip.Writer
}

// Out returns a new MultiTar.
func Out(dst io.Writer) *MultiTar {
	return &MultiTar{
		out: gzip.NewWriter(dst),
	}
}

// Append appends to the underlying writer the content of the tarball
// generated by the given context.
// It also duplicates its writes to the extra writers, if any.
func (m *MultiTar) Append(ctx *Context, src fs.FS, extra ...io.Writer) error {
	all := make([]io.Writer, 0, len(extra)+1)
	all = append(all, m.out)

	for _, w := range extra {
		all = append(all, gzip.NewWriter(w))
	}

	tw := tar.NewWriter(io.MultiWriter(all...))

	if err := ctx.writeTar(tw, src, nil, nil); err != nil {
		return err
	}

	if err := tw.Flush(); err != nil {
		return err
	}

	if len(extra) != 0 {
		// write tar and gzip footers to extra writers to make
		// sure they get a valid archive.
		for _, w := range all[1:] {
			if err := tar.NewWriter(w).Close(); err != nil {
				return err
			}

			if err := w.(*gzip.Writer).Close(); err != nil {
				return err
			}
		}
	}

	return nil
}

// Close flushes and closes the underlying writer.
func (m *MultiTar) Close() error {
	// write tar and gzip footers to the main writer.
	if err := tar.NewWriter(m.out).Close(); err != nil {
		return err
	}

	if err := m.out.Close(); err != nil {
		return err
	}

	return nil
}
