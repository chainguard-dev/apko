name: mink e2e

on:
  pull_request:

defaults:
  run:
    shell: bash

jobs:
  mink-e2e:
    name: apko task
    runs-on: ubuntu-latest

    env:
      KO_DOCKER_REPO: registry.local:5000/chainguard

    steps:
    - uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # v2.4.0

    - uses: actions/setup-go@84cbf8094393cdc5fe1fe1671ff2647332956b1a # v2.1.5
      with:
        go-version: 1.18
        check-latest: true

    - name: Setup QEMU
      uses: docker/setup-qemu-action@v2.0.0

    - uses: imjasonh/setup-ko@78eea08f10db87a7a23a666a4a6fe2734f2eeb8d # v0.4

    - uses: imjasonh/setup-crane@v0.2

    - uses: sigstore/cosign-installer@09a077b27eb1310dcfb21981bee195b30ce09de0 # v2.3.0

    - uses: chainguard-dev/actions/setup-kind@main
      with:
        k8s-version: v1.22.x
        registry-authority: registry.local:5000

    - uses: chainguard-dev/actions/setup-mink@main
      with:
        version: 1.1.0

    - name: "Configure and install mink"
      run: |
        cat > $HOME/.mink.yaml <<EOF
        # Bundle source context to here by default!
        bundle: ${KO_DOCKER_REPO}/bundle:latest
        # Send the resulting image here by default!
        image: ${KO_DOCKER_REPO}/image:latest
        EOF

        mink install

    - name: Build and install apko task
      run: |
        make ko-apply

    - name: Build examples
      run: |
        for cfg in $(find ./examples/ -name '*.yaml'); do
          echo "::group:: $cfg"
          DIGEST=$(mink run task apko -- --path=$cfg)

          echo $cfg produced: $DIGEST

          # Each of the per-architecture images produced should have an SBOM attached to it.
          i=0
          for d in $(crane manifest "${DIGEST}" | jq -r '.manifests[].digest'); do
            cosign download sbom ${KO_DOCKER_REPO}/image@${d}
            i=$(($i+1))
          done

          # If more than one arch, the index should have an sbom
          if [ "$i" -gt "1" ]; then
            cosign download sbom ${DIGEST}
          fi
          
          echo ::endgroup::
        done

    - uses: chainguard-dev/actions/kind-diag@main
      if: ${{failure()}}
